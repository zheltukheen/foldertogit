name: Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Debug directory structure
      shell: pwsh
      run: |
        Get-Location
        Get-ChildItem -Force
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install Fyne
      run: |
        go install fyne.io/fyne/v2/cmd/fyne@latest
        
    - name: Download dependencies
      run: |
        go mod download
        
    - name: Build Windows
      run: |
        cd cmd/gui
        go build -ldflags="-H windowsgui" -o FolderToGit.exe
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: FolderToGit-Windows
        path: cmd/gui/FolderToGit.exe

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, amd64]
    steps:
    - uses: actions/checkout@v4
    
    - name: Debug directory structure
      run: |
        pwd
        ls -la
        find . -type f -name "main.go"
        find . -type f -name "Icon.png"
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install Fyne
      run: |
        go install fyne.io/fyne/v2/cmd/fyne@latest
        which fyne
        
    - name: Download dependencies
      run: |
        go mod download
        
    - name: Install ImageMagick
      run: |
        brew install imagemagick
        
    - name: Create default icon if missing
      run: |
        if [ ! -f cmd/icon/Icon.png ]; then
          echo "Icon not found, creating a default one"
          convert -size 512x512 xc:none -fill "#4A90E2" -draw "circle 256,256 256,50" cmd/icon/Icon.png || {
            echo "Failed to create icon with ImageMagick, creating a simple one"
            convert -size 512x512 xc:#4A90E2 cmd/icon/Icon.png
          }
        fi
        ls -la cmd/icon/Icon.png
        
    - name: Build macOS App
      env:
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 1
      run: |
        cd cmd/gui
        echo "Current directory: $(pwd)"
        echo "Icon path: $(realpath ../../cmd/icon/Icon.png)"
        ls -la ../../cmd/icon/Icon.png
        go build -o FolderToGit
        ~/go/bin/fyne package -os darwin -icon ../../cmd/icon/Icon.png -name FolderToGit -executable FolderToGit -release
        ls -la
        if [ -d "FolderToGit.app" ]; then
          if [ ! -f "FolderToGit.app/Contents/MacOS/FolderToGit" ]; then
            echo "Error: Executable not found or has wrong name"
            ls -la FolderToGit.app/Contents/MacOS/
            exit 1
          fi
          if [ -f "FolderToGit.app/Contents/MacOS/gui" ]; then
            echo "Removing extra executable file gui"
            rm -f "FolderToGit.app/Contents/MacOS/gui"
          fi
          mv FolderToGit.app FolderToGit-${{ matrix.arch }}.app
        else
          echo "FolderToGit.app directory not found"
          ls -la
          exit 1
        fi
        
    - name: Create PKG Installer
      run: |
        cd cmd/gui
        VERSION=$(grep -A1 CFBundleVersion FolderToGit-${{ matrix.arch }}.app/Contents/Info.plist | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
        echo "Using version: $VERSION"
        pkgbuild --root FolderToGit-${{ matrix.arch }}.app --install-location /Applications --identifier com.foldertogit.app --version $VERSION FolderToGit-${{ matrix.arch }}.pkg
        
    - name: Upload macOS App artifact
      uses: actions/upload-artifact@v4
      with:
        name: FolderToGit-macOS-${{ matrix.arch }}-App
        path: cmd/gui/FolderToGit-${{ matrix.arch }}.app
        
    - name: Upload macOS PKG artifact
      uses: actions/upload-artifact@v4
      with:
        name: FolderToGit-macOS-${{ matrix.arch }}-PKG
        path: cmd/gui/FolderToGit-${{ matrix.arch }}.pkg

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            FolderToGit-Windows/FolderToGit.exe
            FolderToGit-macOS-arm64-PKG/FolderToGit-arm64.pkg
            FolderToGit-macOS-amd64-PKG/FolderToGit-amd64.pkg
            FolderToGit-macOS-arm64-App/FolderToGit-arm64.app
            FolderToGit-macOS-amd64-App/FolderToGit-amd64.app
          draft: false
          prerelease: false
          generate_release_notes: true 